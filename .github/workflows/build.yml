name: Reuse EC2 & Deploy

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout Repo
        uses: actions/checkout@v4

      - name: üß∞ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üö¶ Check and Start EC2 Instance if Stopped
        id: start_instance
        run: |
          STATE=$(aws ec2 describe-instances \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --query "Reservations[0].Instances[0].State.Name" \
            --output text)

          echo "Current EC2 state: $STATE"

          if [ "$STATE" = "stopped" ]; then
            echo "Starting EC2 instance..."
            aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
            aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          fi

          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          echo "EC2_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: üê≥ Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üê≥ Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/next-app:latest .

      - name: üì§ Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/next-app:latest

      - name: ‚è±Ô∏è Wait for SSH Availability
        run: sleep 60

      - name: üö¢ Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_IP }}
          username: ubuntu # or ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo apt update && sudo apt install -y docker.io
            sudo systemctl start docker
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/next-app:latest
            sudo docker stop next-app || true
            sudo docker rm next-app || true
            sudo docker run -d --name next-app -p 80:3000 ${{ secrets.DOCKER_USERNAME }}/next-app:latest
      - name: ‚úÖ Health Check (Post Deploy)
        run: |
          curl -f http://${{ env.EC2_IP }} || (echo "Health check failed!" && exit 1)

      - name: üõë Auto-Stop EC2
        run: |
          aws ec2 stop-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
